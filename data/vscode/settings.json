{
  "[handlebars]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.defaultFormatter": "vscode.html-language-features",
  },
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[prisma]": {
    "editor.defaultFormatter": "Prisma.prisma"
  },
  "[sql]": {
    "editor.defaultFormatter": null
  },
  "[typescript]": {
    "editor.defaultFormatter": "biomejs.biome"
  },
  "[vue]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[xml]": {
    "editor.defaultFormatter": "DotJoshJohnson.xml"
  },
  "auto-close-tag.disableOnLanguage": [
    "typescript"
  ],
  "css.validate": false,
  "debug.javascript.autoAttachFilter": "onlyWithFlag",
  "diffEditor.ignoreTrimWhitespace": false,
  "editor.bracketPairColorization.enabled": true,
  "editor.defaultFormatter": "dbaeumer.vscode-eslint",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  },
  "editor.fontFamily": "Source Code Pro",
  "editor.guides.bracketPairs": "active",
  "editor.inlineSuggest.enabled": true,
  "editor.snippetSuggestions": "bottom",
  "editor.stickyScroll.enabled": true,
  "editor.tabCompletion": "on",
  "editor.tabSize": 2,
  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        "scope": [
          "comment"
        ],
        "settings": {
          "foreground": "#e0efd9ba"
        }
      },
      {
        "scope": [
          "punctuation.definition.comment.json",
          "punctuation.definition.comment.js",
          "punctuation.definition.comment.ts"
        ],
        "settings": {
          "foreground": "#fff96933",
          "fontStyle": "italic bold"
        }
      },
      {
        "scope": [
          "keyword.operator.logical.ts",
          "keyword.operator.logical.js",
          "keyword.operator.ternary.js",
          "keyword.operator.ternary.ts",
          "keyword.control.flow.ts",
          "keyword.control.flow.js",
        ],
        "settings": {
          "foreground": "#FF7FBE",
          "fontStyle": ""
        }
      },
      {
        "scope": [
          "string.regexp.ts",
          "string.regexp.js",
        ],
        "settings": {
          "foreground": "#FF0000",
          "fontStyle": "",
        }
      }
    ]
  },
  "eslint.format.enable": true,
  "eslint.validate": [
    "vue",
  ],
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.expand": false,
  "git.closeDiffOnOperation": true,
  "git.mergeEditor": true,
  "github.copilot.enable": {
    "*": true,
    "plaintext": true,
    "markdown": false,
    "scminput": false,
    "yaml": true,
    "vue": true
  },
  "html.format.indentHandlebars": true,
  "markdown.preview.scrollEditorWithPreview": false,
  "markdown.preview.scrollPreviewWithEditor": false,
  "markdown.styles": [
    ".vscode/markdown.css"
  ],
  "scss.validate": false,
  "security.workspace.trust.untrustedFiles": "open",
  "terminal.integrated.automationProfile.osx": {
    "path": "/bin/bash"
  },
  "terminal.integrated.fontFamily": "monospace",
  "todohighlight.isCaseSensitive": true,
  "todohighlight.keywords": [
    {
      "color": "yellow",
      "backgroundColor": "#ffff0022 !important",
      "text": "TODO"
    },
    {
      "color": "red",
      "backgroundColor": "#ff000011 !important",
      "text": "WIP",
    },
  ],
  "typescript.autoClosingTags": false,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "typescript.validate.enable": true,
  // "workbench.colorCustomizations": {
  //   "merge.currentHeaderBackground": "#AAFFFF01",
  //   "merge.incomingHeaderBackground": "#AAFFFF01",
  //   "editorOverviewRuler.commonContentForeground": "#00FFFF99",
  //   "editorOverviewRuler.currentContentForeground": "#00DDAA",
  //   "editorOverviewRuler.incomingContentForeground": "#00AADD",
  //   "scrollbar.shadow": "#00AADD22",
  //   // "minimapGutter.deletedBackground": "#ff55dd00",
  //   // "minimapGutter.modifiedBackground": "#ff663300",
  //   // "minimapGutter.addedBackground": "00000000",
  //   /*
  //       ________________________________
  //       EDITOR ERROR STATUS HIGHLIGHTING            */
  //   "editorOverviewRuler.errorForeground": "#ff0000ff",
  //   "editorMarkerNavigationError.background": "#ff0000dd",
  //   "editorMarkerNavigationError.headerBackground": "#ff0000dd",
  //   "editorError.foreground": "#FF5533dd",
  //   "editorError.background": "#00000000",
  //   "editorError.border": "#00000000",
  //   /*
  //       __________________________________
  //       EDITOR WARNING STATUS HIGHLIGHTING          */
  //   "editorWarning.foreground": "#FFBB0088",
  //   "editorWarning.background": "#00000000",
  //   "editorWarning.border": "#00000000",
  //   /*
  //       __________________________________
  //       EDITOR INFO STATUS HIGHLIGHTING          */
  //   "editorInfo.foreground": "#33FF11",
  //   "editorInfo.background": "#00000000",
  //   "editorInfo.border": "#00000000",
  // },
  "workbench.editorAssociations": {
    "git-rebase-todo": "default"
  },
  "[postcss]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[javascript]": {
    "editor.defaultFormatter": "vscode.typescript-language-features",
    "editor.inlayHints.enabled": "onUnlessPressed"
  },
  "[dotenv]": {
    "editor.defaultFormatter": "foxundermoon.shell-format"
  },
  "terminal.integrated.env.osx": {
    "FIG_NEW_SESSION": "1"
  },
  "editor.accessibilitySupport": "off",
  "gitlens.launchpad.indicator.enabled": false,
  "files.associations": {
    "*.env": "properties",
    "*.html": "html"
  },
  "gitlens.views.branches.branches.layout": "list",
  "terminal.integrated.defaultProfile.osx": "sh",
  "zenMode.hideStatusBar": false,
  "vim.useSystemClipboard": true,
  "vim.useCtrlKeys": true,
  "vim.smartcase": false,
  "vim.ignorecase": false,
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<leader>",
        "e", // expand ...
        "t", // tag
      ],
      "after": [
        "?", // find previous ...
        "<", // tag start
        "<Enter>",
        "l", // move right, onto tag name
        "y", // yank ...
        "i", // inner ...
        "w", // word
        "/", // find next ...
        ">", // tag end
        "<Enter>",
        "d", // delete ...
        "h", // one left (/)
        "i", // insert ...
        "<", // </>
        "/",
        ">",
        "<esc>",
        "\"", // paste tag name
        "0",
        "P",
        "l", // move right, onto end of tag pasted tag
        "v", // visual
        "B", // select whole closing tag
        "d", // delete
        "p", // paste again (after end of opening tag)
        "F", // find previous ...
        "<", // tag start
        "i", // insert ...
        "<Enter>", // newline
        "<esc>",
        "O", // insert new line above and enter insert mode
        " ", // indent
        " ", // indent
      ]
    },
    {
      "before": [
        "<leader>",
        "d", // delete
        "a", // attribute (HTML :attr="value")
      ],
      "after": [
        "h",
        "f",
        "\"",
        "v",
        "a",
        "\"",
        "o",
        "<esc>",
        "f",
        "\"",
        "v",
        "F",
        "\"",
        "B",
        "h",
        "d",
      ]
    },
    {
      "before": [
        "<leader>",
        "v", // select
        "a", // attribute (HTML :attr="value")
      ],
      "after": [
        "h",
        "f",
        "\"",
        "v",
        "a",
        "\"",
        "o",
        "<esc>",
        "f",
        "\"",
        "v",
        "F",
        "\"",
        "B",
        "h",
      ]
    },
    {
      "before": [
        "<leader>",
        "y", // yank
        "a", // attribute (HTML :attr="value")
      ],
      "after": [
        "h",
        "f",
        "\"",
        "v",
        "a",
        "\"",
        "o",
        "<esc>",
        "f",
        "\"",
        "v",
        "F",
        "\"",
        "B",
        "h",
        "y",
      ]
    },
    {
      "before": [
        "<leader>",
        "g", // go to
        "o", // previous editing location
      ],
      "commands": [
        "workbench.action.editor.previousChange"
      ]
    },
    {
      "before": [
        "<leader>",
        "g", // go to
        "p", // next editing location
      ],
      "commands": [
        "workbench.action.editor.nextChange"
      ]
    },
    {
      "before": [
        "<leader>",
        "g", // go to
        "m", // mark
      ],
      "after": [
        "`"
      ]
    },
    {
      "before": [
        "u"
      ],
      "commands": [
        "undo"
      ]
    },
    {
      "before": [
        "<C-r>",
      ],
      "commands": [
        "redo"
      ]
    },
    {
      "before": [
        "U",
      ],
      "commands": [
        "redo"
      ]
    },
    {
      "before": [
        "x"
      ],
      "after": [
        "\"",
        "x",
        "x"
      ]
    },
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": [
        "S",
        "<"
      ],
      "after": [
        "d",
        "i",
        "<",
        ">",
        "Esc",
        "\"",
        "+",
        "P"
      ]
    },
    {
      "before": [
        "x"
      ],
      "after": [
        "\"",
        "x",
        "x"
      ]
    }
  ],
  "vim.leader": "<space>",
  "vim.easymotion": true,
  "vim.history": 50,
  "vim.showmodename": true,
  "vim.easymotionMarkerFontWeight": "semibold",
  "vim.easymotionMarkerForegroundColorOneChar": "#eeffaa",
  "editor.fontSize": 15.625,
  "terminal.integrated.fontSize": 12,
  "git.openRepositoryInParentFolders": "always",
  "[graphql]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "editor.formatOnSave": true,
  "search.searchOnTypeDebouncePeriod": 500,
  "[python]": {
    "editor.formatOnType": true
  },
  "github.copilot.advanced": {
    "listCount": 2,
  },
  "editor.cursorSurroundingLines": 999,
  "explorer.confirmDragAndDrop": false,
  "[json]": {
    "editor.defaultFormatter": "biomejs.biome"
  },
  "[properties]": {
    "editor.defaultFormatter": "foxundermoon.shell-format"
  },
  "multiCommand.commands": {
    "multiCommand.closeOtherTabs": {
      "sequence": [
        "workbench.action.focusActiveEditorGroup",
        "workbench.action.closeOtherEditors"
      ],
    },
    "multiCommand.closeOtherGroups": {
      "sequence": [
        "workbench.action.focusActiveEditorGroup",
        "workbench.action.closeEditorsInOtherGroups"
      ],
    },
  },
  "jdk.userdir": "global",
  "jdk.java.imports.countForUsingStarImport": 4,
  "jdk.java.imports.countForUsingStaticStarImport": 4,
  "jdk.jdkhome": "/Users/erikbjorn/.sdkman/candidates/java/current",
  "jdk.java.onSave.organizeImports": false,
  "editor.suggest.showIssues": false,
  "java.configuration.updateBuildConfiguration": "automatic",
  "editor.suggest.showEvents": false,
  "editor.suggest.showOperators": false,
  "editor.suggest.showStructs": false,
  "editor.suggest.showUsers": false,
  "editor.suggest.matchOnWordStartOnly": false,
  "editor.suggest.showKeywords": false,
  "[java]": {
    "editor.defaultFormatter": "ilkka.google-java-format"
  },
  "[yaml]": {
    "editor.defaultFormatter": "redhat.vscode-yaml"
  },
  "editor.minimap.size": "fill",
  "editor.acceptSuggestionOnCommitCharacter": false,
  "[proto3]": {
    "editor.defaultFormatter": "zxh404.vscode-proto3"
  },
  "editor.parameterHints.enabled": true,
  "java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx2G -Xms100m -Xlog:disable",
  "editor.suggest.showWords": false,
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/? ",
  "javascript.updateImportsOnFileMove.enabled": "always",
  "zenMode.fullScreen": false,
  "editor.suggest.showInlineDetails": false,
  "emmet.useInlineCompletions": true,
  "editor.quickSuggestions": {
    "other": "off"
  },
  "typescript.disableAutomaticTypeAcquisition": true,
  "files.exclude": {
    "**/node_modules/**/*": true,
    "**/prisma/generated/**/*": true,
    "**/public/swagger/**/*": true,
    "**/target/**/*": true,
    "node_modules": true
  },
  "typescript.tsserver.maxTsServerMemory": 4000,
  "typescript.tsserver.log": "off",
  "typescript.tsserver.enableTracing": true,
  "quokka.snapsAutoDiscovery": false,
  "vue.autoInsert.dotValue": true,
  "vue.inlayHints.missingProps": true,
  "vue.inlayHints.vBindShorthand": true,
  "vue.updateImportsOnFileMove.enabled": true,
  "workbench.startupEditor": "none",
  "workbench.editor.customLabels.patterns": {
    "**/{Index,index}.*": "${dirname}/${filename}.${extname}"
  },
  "git.autofetch": true,
  "[scss]": {
    "editor.defaultFormatter": "biomejs.biome",
    "editor.suggest.insertMode": "replace"
  },
  "github.copilot.editor.enableAutoCompletions": true,
  "[qute-html]": {
    "editor.defaultFormatter": "vscode.html-language-features"
  },
  "java.compile.nullAnalysis.mode": "disabled",
  "java.autobuild.enabled": false,
  "[css]": {
    "editor.defaultFormatter": "vscode.css-language-features"
  },
  "quarkus.tools.alwaysShowWelcomePage": false,
  "html.format.unformatted": "input",
  "editor.inlineSuggest.suppressSuggestions": true,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "java.typeHierarchy.lazyLoad": true,
  "typescript.tsdk": "node_modules/typescript/lib",
  "vue.server.hybridMode": false,
  "workbench.colorTheme": "Tokyo Night",
  "github.copilot.chat.codeGeneration.instructions": [
    {
      "text": " Always try to show as concise examples as possible, not regenerating the whole file, but only the relevant part.  If there is ambiguity, ask for more context.  If the prompt is a question, only generate code if it is a very small example, otherwise only respond in natural language. If the prompt is a demand or an order, apply the changes instead of merely suggesting them."
    }
  ]
}